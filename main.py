from train import *


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='DeepSDF')

    parser.add_argument("-r", "--reconstruct", action="store_true", help="Activate reconstruct mode for all test models")
    parser.add_argument("-e", "--trainreconstruct", action="store_true", help="Activate reconstruct mode for all train models")
    parser.add_argument("-i", "--inference", action="store_true", help="Activate inference mode for all test models")
    parser.add_argument("-ih", "--hessdeltainference", action="store_true", help="Activate hessdelta inference mode for all test models")
    parser.add_argument("-ri", "--reinference", action="store_true", help="Activate retraining inference model for all test models")
    parser.add_argument("-ra", "--reconstructall", action="store_true", help="Activate reconstructing  for all test models")

    # paths you may want to adjust, but it's better to keep the defaults
    parser.add_argument("--trainfilepath", default="data/train_100.txt", type=str, help="Trianing data file names")
    parser.add_argument("--valfilepath", default="data/val_20.txt", type=str, help="Validation data file names")
    parser.add_argument("--testfilepath", default="data/test_1.txt", type=str, help="Validation data file names")
    parser.add_argument("--testfilename", default="test_1_10", type=str, help="test filename to save names")
    parser.add_argument("--testoutputdir", default="testoutput", type=str, help="test outputdir ")
    parser.add_argument("--traindir", default="../../data/250k_sampled/train/", type=str, help="Training data")
    parser.add_argument("--onsurfdir", default="../../data/250k_sampled/onsurfdata/", type=str, help="Training data")
    parser.add_argument("--valdir", default="../../data/250k_sampled/val/", type=str, help="Validation data")
    parser.add_argument("--testdir", default="../../data/250k_sampled/test/", type=str, help="Validation data")
    parser.add_argument("--sdfdir", default="../../data/250k_sampled/sdfdata/", type=str, help="Data directory of stored gt_sdf points")
    parser.add_argument("--latent_size",default=256, type=int, help="latent codec for shapes")
    parser.add_argument("--train_batch", default=16384, type=int, help="Batch size for training")
    parser.add_argument("--subsample", default=16384, type=int, help=" subsample size for training")
    parser.add_argument("--BB", default=1.0, type=float, help=" Bounding box for random sampling")
    parser.add_argument("--batch_size", default=32, type=int, help="Batch size for training")
    parser.add_argument("--test_batch", default=16384, type=int, help="Batch size for testing")
    parser.add_argument("--input_pts", default="data/bunny-1000.pts", type=str, help="Input points")
    parser.add_argument("--gtfname", default="ground truth file name without noise", type=str, help="Ground truth filename")
    parser.add_argument("--lat", default=256, type=int, help="Latent code size")
    parser.add_argument("--save_file_name", default="bunny_1000", type=str, help="Folder to save testing visualization")
    parser.add_argument("--file_name", default="bunny_1000", type=str, help="Folder to save testing visualization")
    parser.add_argument("--checkpoint_folder", default="checkpoints/", type=str, help="Folder to save checkpoints")
    parser.add_argument("--outfolder", default="output/", type=str, help="Folder to save outputs")
    parser.add_argument("--latcode_folder", default="latcode/", type=str, help="Folder to save checkpoints")
    parser.add_argument("--latfname", default="tanh10xxsimple5hnd256lat2", type=str, help="Name for the latent code from just latcode optimization")
    parser.add_argument("--resume_file", default="model_best.pth.tar", type=str, help="Path to retrieve latest checkpoint file relative to checkpoint folder")

    # hyperameters of network/options for training
    parser.add_argument("--weight_decay", default=1e-2, type=float, help="Weight decay/L2 regularization on weights")
    parser.add_argument("--lr", default=1e-5, type=float, help="Initial learning rate")
    parser.add_argument("--latlr", default=1e-3, type=float, help="Initial learning rate for latent optimization")
    parser.add_argument("--optimizer", default='adam', type=str, help="type of optimizer")
    parser.add_argument("--model", default='simple', type=str, help="type of model")
    parser.add_argument("--activation", default='siren', type=str, help="type of model")
    parser.add_argument("--typemodel", default='deepsdf', type=str, help="type of model")
    parser.add_argument("--cotypemodel", default='None', type=str, help="type of model pretrained")
    parser.add_argument("--usedropout", default=1, type=int, help="dropout model")
    parser.add_argument("--alpha", default=0.1, type=float, help="alpha used in grad norm model")
    parser.add_argument("--bs", default='lr', type=str, help="increase batch size by loss or by epoch or reduce lr")
    parser.add_argument("--factor", default=0.9, type=float, help="LR reducing factor")
    parser.add_argument("--schedule", type=int, nargs="+", default=[40, 50], help="Decrease learning rate at these milestone epochs.")
    parser.add_argument("--scheduler", default='reducelr', type=str, help="Type of lr scheduler")
    parser.add_argument("--gamma", default=0.1, type=float, help="Decays the learning rate of each parameter group by gamma once the number of epoch reaches one of the milestone epochs")
    parser.add_argument("--eikonal_delta", default=0.0, type=float, help="Hyperparameter for eikonal loss")
    parser.add_argument("--imp_eikonal_delta", default=0.0, type=float, help="Hyperparameter for eikonal loss in implicit regularization")
    parser.add_argument("--hess_delta", default=0.0, type=float, help="Hyperparameter for hessian regularizer")
    parser.add_argument("--mean_delta", default=0.0, type=float, help="Hyperparameter for meanCurvature regularizer")
    parser.add_argument("--offsurf_delta", default=0.0, type=float, help="Hyperparameter for offsurface regularizer")
    parser.add_argument("--data_delta", default=1e4, type=float, help="Hyperparameter for dataloss")
    parser.add_argument("--code_delta", default=1e-04, type=float, help="Hyperparameter for codeloss")
    parser.add_argument("--sdf_delta", default=0.0, type=float, help="Hyperparameter for mcube surface sdf dataloss")
    parser.add_argument("--sign_delta", default=0.0, type=float, help="Hyperparameter for mcube surface sdf sign loss")
    parser.add_argument("--normal_delta", default=0.0, type=float, help="Hyperparameter for normal loss")
    parser.add_argument("--reg", default=1, type=int, help="Loss computation with or without regularizer")
    parser.add_argument("--omega", default=30, type=float, help="sine frequency")
    parser.add_argument("--withomega", default=1, type=int, help="divide by frequency omega")
    parser.add_argument("--normalization", default='batch', type=str, help="type of normalization in hidden layer")
    parser.add_argument("--clamp", default=0, type=int, help="clamp the sdf")
    parser.add_argument("--start_epoch", default=0, type=int, help="Start from specified epoch number")
    parser.add_argument("--epochs", default=80, type=int, help="Number of epochs to train (when loading a previous model, it will train for an extra number of epochs)")
    parser.add_argument("--train_split_ratio", default=0.8, type=float, help="ratio of training split")
    parser.add_argument("--N_samples", default=1, type=float, help="for each input point, N samples are used for training or validation")
    parser.add_argument("--sample_variance_1", default=0.0025, type=float, help="we perturb each surface point along normal direction with mean-zero Gaussian noise with the given variance")
    parser.add_argument("--sample_variance_2", default=0.00025, type=float, help="we perturb each surface point along normal direction with mean-zero Gaussian noise with the given variance")
    parser.add_argument("--clamping_distance", default=0.01, type=float, help="clamping distance for sdf")
    parser.add_argument("--threshold", default=0.0001, type=float, help="sdf threshold for hessian")
    parser.add_argument("--nonvalid", default=0, type=int, help="use >threshold for hessian loss calculation")
    parser.add_argument("--onsurf", default=0, type=int, help="To get pretrained points from surface")
    parser.add_argument("--mcube", default=1, type=int, help="To get pretrained points from mcube surface")
    parser.add_argument("--gauss", default=0, type=int, help="To get gauss curvature from surface")
    parser.add_argument("--adap", default=0, type=int, help="To adaptively change weight for hess reg")
    parser.add_argument("--mcubedata", default=0, type=int, help="include mcube surface data to loss")
    parser.add_argument("--sdfnorm", default=1, type=int, help="The way to get the norms in this")
    parser.add_argument("--isclosedmesh", default=1, type=int, help="Is the mesh water tight with inside and outside volume")
    parser.add_argument("--randx", default=1, type=float, help="number of random points")
    parser.add_argument("--losstype", default='avg', type=str, help="type of loss function to use")
    parser.add_argument("--data_reduction", default='mean', type=str, help="data reduction")
    parser.add_argument("--hess_reduction", default='mean', type=str, help="hess reduction")
    parser.add_argument("--reduction", default='mean', type=str, help="type of reduction")
    parser.add_argument("--surface_xyz", default=1, type=int, help="use seperate surface xyz model")
    parser.add_argument("--expsdf", default=0, type=int, help="use exp(sdf) to compute hess regularizer")
    parser.add_argument("--resamp", default=1, type=int, help="when to resample 1 = bestloss, 2 = every 5 epochs")
    parser.add_argument("--isolevel", default=0, type=int, help="iso level to extract")
    parser.add_argument("--exp", default='none', type=str, help="delta value for data to compute hess regularizer")
    parser.add_argument("--offtype", default='max', type=str, help="delta value for off surf regul")
    parser.add_argument("--clip", default=0, type=float, help="clip gradient value")
    parser.add_argument("--phase", default="train", type=str, help="phase value")


    # various options for testing and evaluation
    parser.add_argument("--grid_N", default=256, type=int, help="construct a 3D NxNxN grid containing the point cloud")
    parser.add_argument("--max_xyz", default=1.0, type=float, help="largest xyz coordinates")
    parser.add_argument("--use_pretrained_model", default=0, type=int, help="check if to use pretrained_model")
    parser.add_argument("--use_surface_points", default=True, type=bool, help="check if to include surface points in sdf prediction")
    parser.add_argument("--use_pert_points_regularizer", default=False, type=bool, help="check if to use pert point to compute hessian")
    parser.add_argument("--use_surface_points_regularizer", default=True, type=bool, help="check if to use surface point to compute hessian")
    parser.add_argument("--use_checkpoint_model", default=0, type=int, help="check if to use trained checkpoint")
    parser.add_argument("--pretrained_model_folder", default='./pretrained_model_folder', type=str, help="pretrained_model directory")
    parser.add_argument("--pretrained_hessmodel_folder", default='./pretrained_model_folder', type=str, help="pretrained_model directory")
    parser.add_argument("--use_model", default="best", type=str, help="which model to use checkpoint")
   

    print(parser.parse_args())
    trainModel(parser.parse_args())
